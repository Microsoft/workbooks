---
id: ea61c33e-2fd4-4b80-a550-f9e1340e07c5
uti: com.xamarin.workbook
platforms:
- Console
---

# General Typography

C# provides a rich syntax for classes and structs that is used to explain your design intent. But sometimes that rich syntax requires extra work with minimal benefit. You may often write methods that need a simple structure containing more than one data element. To support these scenarios *tuples* were added to C#. Tuples are lightweight data structures that contain multiple fields to represent the data members. The fields are not validated, and you cannot define your own methods

The examples above show the basic syntax to declare tuples. Tuples are most useful as return types for `private` and `internal` methods. Tuples provide a simple syntax for those methods to return multiple discrete values: You save the work of authoring a `class` or a `struct`that defines the type returned. There is no need for creating a new type.

```csharp
Console.WriteLine ("Only has console output")
```

This is a **_markdown_** paragraph.

* This is a bulleted

* List

* With three items

Here’s another paragraph that will reference a truly amazing quote:

> To me, it's always a good idea to always carry two sacks of something when you walk around. That way, if anybody says, "Hey, can you give me a hand?," you can say, "Sorry, got these sacks."
>
> * one
>
> * two
>
> * three
>
> -- Deep Thoughts, by Jack Handey

And a following paragraph.

Here’s an ordered list:

1. Bacon

2. Liver Sausages

3. Beef Ribeye

```csharp
Console.WriteLine ("Console output and a result");
Guid.NewGuid ();
```

```csharp
typeof (object)
```

## Header 2

```csharp
await Task.Delay (10000)
```

```csharp
#warning "warning and a result"
100
```

### Header 3

A paragraph

#### Header 4

```csharp
#warning "warning and an error"
error
```

# Styled Callouts

Callouts are blockquotes that start with an emoji. Currently the emoji is rendered as text, but future versions may hide the emoji (this is technically very difficult right now since a DOM `MutationObserver` is used for the detection, and changing the DOM would conflict with ProseMirror).

> Plain Blockquote (no emoji hint)

> ℹ️ Informative Callout

> ⚠️ Warning Callout

> 🚫 Error Callout

> 💩 Things are really bad Callout