steps:

# Keep in sync with global.json ðŸ™„
- task: DotNetCoreInstaller@0
  inputs:
    version: 2.1.4
  displayName: Install .NET Core

# This script runs both via bash (macOS/Linux) and cmd (Windows).
# Keep it both valid bash and batch or break it out conditionally.
- script: |
    echo System Environment
    set
    echo .NET Core Info
    dotnet --info
  displayName: Dump Environment

- task: MSBuild@1
  inputs:
    solution: Build.proj
    msbuildArguments: '/t:GeneratePolicheckInputFile'
    logProjectEvents: true
  continueOnError: true
  displayName: Generate PoliCheck Input

- task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
  inputs:
    targetType: FL
    targetArgument: '$(Build.SourcesDirectory)\PolicheckInput.txt'
    result: '..\..\..\s\_artifacts\PoliCheck.xml'
    optionsFC: 1
    optionsXS: 0
    optionsHMENABLE: 0
  continueOnError: true
  displayName: Run PoliCheck

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Restore /p:Profile=$(msbuild.buildProfile)'
  displayName: Restore

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Build /p:Profile=$(msbuild.buildProfile)'
  displayName: Build

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Package /p:Profile=$(msbuild.buildProfile)'
  displayName: Package

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '_artifacts'
    ArtifactName: Artifacts
    publishLocation: Container
    displayName: Publish Artifacts