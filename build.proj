<Project InitialTargets="Configure" DefaultTargets="Restore;Build">
  <Import Project="Directory.Build.props"/>
  <Import Project="Directory.Build.targets"/>
  <Import Project="build\Environment.targets"/>
  <Import Project="build\Utility.targets"/>

  <PropertyGroup>
    <ReleaseVersion_SemVer>2.0.0-dev</ReleaseVersion_SemVer>
    <CommonGitInfo_SetMinRevisionFromMostRecentTagRegex>true</CommonGitInfo_SetMinRevisionFromMostRecentTagRegex>
    <CommonGitInfo_MostRecentTagRegex>^v\d+</CommonGitInfo_MostRecentTagRegex>

    <WorkbooksIntegrationNuGetPackageVersion>2.0.0-rc1</WorkbooksIntegrationNuGetPackageVersion>
  </PropertyGroup>

  <PropertyGroup>
    <SolutionFile>$(MSBuildThisFileDirectory)build\Xamarin.Interactive.sln</SolutionFile>
    <SolutionFileRelative>$([MSBuild]::MakeRelative($(MSBuildThisFileDirectory), $(SolutionFile)))</SolutionFileRelative>
    <SolutionBasePath>$([System.IO.Path]::GetDirectoryName($(SolutionFile)))\</SolutionBasePath>
  </PropertyGroup>

  <!-- Profiles -->

  <Target
    Name="WebProfile"
    DependsOnTargets="CoreProfile;WorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild Include="Clients\Xamarin.Interactive.Client.Web\*.csproj">
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.WebAssembly\*.csproj" />
    </ItemGroup>
  </Target>

  <Target
    Name="ConsoleProfile"
    DependsOnTargets="CoreProfile;WorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild Include="Clients\Xamarin.Interactive.Client.Console\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="DesktopProfile"
    Condition="!$(IsDotNetCoreMSBuild)"
    DependsOnTargets="CoreProfile;WorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild
        Condition="$(IsMac)"
        Include="Clients\Xamarin.Interactive.Client.Mac\*.csproj">
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="Clients\Xamarin.Interactive.Client.Windows\*.csproj">
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="Tools\InstallerVerifier\*.csproj"/>
      <ProjectsToBuild
        Include="Tests\Xamarin.Interactive.Tests\*.csproj" />
      <ProjectsToBuild
        Condition="$(IsMac)"
        Include="Tests\Xamarin.Interactive.Tests.InspectorSupport.Mac\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="CoreProfile">
    <ItemGroup>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive\*.csproj">
        <HasPublicApi>true</HasPublicApi>
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Tests\*.csproj">
        <HasXunitTests>true</HasXunitTests>
      </ProjectsToBuild>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis\*.csproj">
        <HasPublicApi>true</HasPublicApi>
      </ProjectsToBuild>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis.Tests\*.csproj">
        <HasXunitTests>true</HasXunitTests>
      </ProjectsToBuild>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis.Roslyn\*.csproj"/>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis.Roslyn.Tests\*.csproj">
        <HasXunitTests>true</HasXunitTests>
      </ProjectsToBuild>
      <ProjectsToBuild Include="Clients\Xamarin.Interactive.Client\*.csproj">
        <HasPublicApi>true</HasPublicApi>
      </ProjectsToBuild>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <WorkbookAppsProfileDependsOnTargets>
      CoreProfile;
      DotNetCoreWorkbookAppsProfile;
      DesktopWorkbookAppsProfile;
      XamarinAndroidWorkbookAppsProfile;
      XamarinIosWorkbookAppsProfile;
      XamarinMacWorkbookAppsProfile
    </WorkbookAppsProfileDependsOnTargets>
  </PropertyGroup>

  <Target
    Name="WorkbookAppsProfile"
    DependsOnTargets="$(WorkbookAppsProfileDependsOnTargets)"/>

  <Target
    Name="DotNetCoreWorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.DotNetCore\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="DesktopWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild)">
    <ItemGroup>
      <ProjectsToBuild
        Condition="$(IsWindows) Or $(HaveMono)"
        Include="Agents\Xamarin.Interactive.Console\*.csproj"/>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="WorkbookApps\Xamarin.Workbooks.Wpf\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="XamarinAndroidWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild) And $(HaveXamarinAndroid)">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.Android\*.csproj"/>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Android.ActivityTrackerShim\*.csproj"/>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Forms.Android\*.csproj"/>
      <ProjectsToBuild
        Condition="Exists($(ProprietaryDirectory))"
        Include="$(ProprietaryDirectory)ClientIntegrations\Xamarin.Workbooks.Client.Android\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="XamarinIosWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild) And $(HaveXamarinIos)">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.iOS\*.csproj">
        <Platform>iPhoneSimulator</Platform>
      </ProjectsToBuild>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Forms.iOS\*.csproj"/>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="Clients\Xamarin.Interactive.Client.Mac.SimChecker\*.csproj"/>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="ClientIntegrations\Xamarin.Workbooks.Client.iOS\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="XamarinMacWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild) And $(HaveXamarinMac)">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.Mac\*.csproj"/>
    </ItemGroup>
  </Target>

  <!-- Solution Targets -->

  <Target
    Name="Build"
    DependsOnTargets="@(ProfileTargets)">
    <Exec Condition="$(IsWindows) And Exists('$(Adb)')" Command="$(Adb) kill-server"/>
    <Exec Condition="$(IsMac)" Command="xcrun -k"/>
    <MSBuild
      Projects="$(SolutionFile)"
      Targets="Build"/>
  </Target>

  <Target
    Name="Restore"
    DependsOnTargets="@(ProfileTargets)">
    <Message Importance="High" Text="Restoring NuGet packages for $(SolutionFileRelative)..."/>
    <!-- See https://github.com/Microsoft/msbuild/issues/2455 -->
    <MSBuild
      Projects="$(SolutionFile)"
      Properties="_TrickyTricky=SoWeDontNeedRestoreFlag"
      Targets="Restore"/>
  </Target>

  <!-- Profile Targets -->

  <Target
    Name="Package"
    DependsOnTargets="@(ProfileTargets)">
    <MakeDir Directories="$(ArtifactsBasePath)"/>

    <PropertyGroup>
      <XamarinUpdaterProductGuid Condition="$(IsMac)">42a8c70f-b3dc-42f4-b8a5-435a1bb2410c</XamarinUpdaterProductGuid>
      <XamarinUpdaterProductGuid Condition="$(IsWindows)">201185fb-fefe-4996-bdfe-4b6ac311a73b</XamarinUpdaterProductGuid>
    </PropertyGroup>
    <WriteLinesToFile
      Condition="'$(XamarinUpdaterProductGuid)' != ''"
      File="$(ArtifactsBasePath)updateinfo"
      Lines="$(XamarinUpdaterProductGuid) $(ReleaseVersion_UpdateInfo)"
      Overwrite="true"/>

    <ItemGroup>
      <BuildInfoLines Include="Version: $(ReleaseVersion_SemVer)"/>
      <BuildInfoLines Include="Hash: $(CommonGitInfo_MaxRevisionShort)"/>
      <BuildInfoLines Include="Branch: $(BuildEnvironment_Branch)"/>
      <BuildInfoLines Include="Build date: $([System.DateTime]::UtcNow.ToString('r'))"/>
      <BuildInfoLines Include="Client compatibility: 1"/>
    </ItemGroup>
    <WriteLinesToFile
      File="$(ArtifactsBasePath)buildinfo"
      Lines="@(BuildInfoLines)"
      Overwrite="true"/>

    <ItemGroup>
      <PackageProjectsToBuild
        Include="@(ProjectsToBuild)"
        Condition="'%(ProjectsToBuild.HasPackageTarget)' != ''"/>
    </ItemGroup>
    <MSBuild
      Projects="@(PackageProjectsToBuild)"
      Targets="Package"/>
  </Target>

  <Target
    Name="Test"
    DependsOnTargets="@(ProfileTargets)">
    <ItemGroup>
      <ProjectsToTest
        Include="@(ProjectsToBuild)"
        Condition="'%(ProjectsToBuild.HasXunitTests)' != ''"/>
    </ItemGroup>
    <Message Importance="High" Text="Selected xUnit Tests:"/>
    <Message Importance="High" Text="  %(ProjectsToTest.Filename)"/>
    <Exec
      WorkingDirectory="%(ProjectsToTest.RootDir)%(ProjectsToTest.Directory)"
      Command="dotnet xunit -nocolor -nobuild -c $(Configuration) -xml %(ProjectsToTest.Filename).xml"/>
  </Target>

  <!-- Configuration / Solution Generation -->

  <Target
    Name="GenerateReleaseVersions"
    DependsOnTargets="
      Xamarin_Build_ReadBuildEnvironment;
      Xamarin_Build_ReadCommonGitInfo">
    <PropertyGroup>
      <CommonGitInfo_MaxRevision Condition="'$(BuildEnvironment_Revision)' != ''">$(BuildEnvironment_Revision)</CommonGitInfo_MaxRevision>
      <ReleaseVersion_SemVer>$(ReleaseVersion_SemVer)+$(CommonGitInfo_MinMaxCommitDistance)</ReleaseVersion_SemVer>
      <ReleaseVersion_UpdateInfo>$(CommonGitInfo_MaxRevisionTimestamp)</ReleaseVersion_UpdateInfo>
    </PropertyGroup>
    <ItemGroup>
      <PropertiesToPersist Include="CommonGitInfo_MaxRevision">
        <Value>$(CommonGitInfo_MaxRevision)</Value>
      </PropertiesToPersist>
      <PropertiesToPersist Include="ReleaseVersion_SemVer">
        <Value>$(ReleaseVersion_SemVer)</Value>
      </PropertiesToPersist>
      <PropertiesToPersist Include="ReleaseVersion_UpdateInfo">
        <Value>$(ReleaseVersion_UpdateInfo)</Value>
      </PropertiesToPersist>
    </ItemGroup>
  </Target>

  <Target
    Name="Configure"
    DependsOnTargets="
      GenerateReleaseVersions;
      Xamarin_Build_ReadReleaseVersions;
      ResolveExternalTools">
    <PropertyGroup>
      <Profile Condition="'$(Profile.ToLowerInvariant())' == 'full'"></Profile>
      <Profile Condition="'$(Profile.ToLowerInvariant())' == 'fullprofile'"></Profile>
      <Profile Condition="'$(Profile)' == ''">Desktop+Web+Console</Profile>
    </PropertyGroup>
    <ItemGroup>
      <Profiles Include="$(Profile.Replace('|', '+').Replace(',', '+').Replace(';', '+').Split('+'))"/>
      <Profiles>
        <ProfileName>$([System.Text.RegularExpressions.Regex]::Replace(
            %(Identity),
            'Profile$',
            '',
            System.Text.RegularExpressions.RegexOptions.IgnoreCase))</ProfileName>
      </Profiles>
      <ProfileTargets Include="@(Profiles -> '%(ProfileName)Profile')"/>
    </ItemGroup>

    <ItemGroup>
      <PropertiesToPersist Include="Configuration">
        <Value>$(Configuration)</Value>
      </PropertiesToPersist>
      <PropertiesToPersist Include="Profile">
        <Value>$(Profile)</Value>
      </PropertiesToPersist>
      <PropertiesToPersist Include="WorkbooksIntegrationNuGetPackageVersion">
        <Value>$(WorkbooksIntegrationNuGetPackageVersion)</Value>
      </PropertiesToPersist>
    </ItemGroup>

    <UpdateMSBuildProject
      Project="$(GlobalConfigurationPropsFile)"
      AsNewProject="true"
      Properties="@(PropertiesToPersist)"/>
  </Target>

  <Target
    Name="ConfigurationSummary"
    BeforeTargets="Restore;Build">
    <ItemGroup>
      <ConfigurationSummary Include="%20%20Resolved Tools:"/>
      <ConfigurationSummary Condition="'$(Adb)' != ''" Include="%20%20%20%20Adb: $(Adb)"/>
      <ConfigurationSummary Include="%20%20%20%20NuGet: $(NuGet)"/>
      <ConfigurationSummary Include="%20%20%20%20Node: $(Node)"/>
      <ConfigurationSummary Include="%20%20%20%20Yarn: $(Yarn)"/>
      <ConfigurationSummary Include="%20%20%20%20Npm: $(Npm)"/>
    </ItemGroup>
    <Message Importance="High" Text="%(ConfigurationSummary.Identity)"/>
    <Message Importance="High" Text="Projects To Build ($(Configuration)):"/>
    <Message Importance="High" Text="  %(ProjectsToBuild.Filename)"/>
  </Target>

  <Target
    Name="GenerateSolution"
    BeforeTargets="Restore;Build"
    Inputs="
      $(MSBuildThisFileFullPath);
      $(GlobalConfigurationPropsFile);
      $(SolutionBasePath)SolutionGlobalSections"
    Outputs="$(SolutionFile)">
    <Message Importance="High" Text="Generating $(SolutionFileRelative)..."/>
    <GenerateSolution
      ProjectsRelativeToPath="$(MSBuildThisFile)"
      Projects="@(ProjectsToBuild)"
      SolutionConfiguration="$(Configuration)"
      GlobalSectionsFiles="$(SolutionBasePath)SolutionGlobalSections"
      OutputFile="$(SolutionFile)"/>
  </Target>

  <!-- Utility Targets -->

  <Target Name="Clean">
    <FindDirectories
      BasePath="$(TopDirectory)"
      Recurse="false"
      SearchPattern="_*">
      <Output
        TaskParameter="Directories"
        ItemName="DirectoriesToRemove"/>
    </FindDirectories>

    <FindDirectories
      BasePath="$(TopDirectory)"
      IncludeNames="obj;bin"
      ExcludeNames="node_modules;Xamarin.Build">
      <Output
        TaskParameter="Directories"
        ItemName="DirectoriesToRemove"/>
    </FindDirectories>

    <RemoveDir Directories="@(DirectoriesToRemove)"/>
  </Target>

  <Target
    Name="UpdatePublicApiDefinitions"
    DependsOnTargets="@(ProfileTargets)">
    <PropertyGroup>
      <ApiConfiguration>Release</ApiConfiguration>
    </PropertyGroup>
    <ItemGroup>
      <PublicApiProjectsToBuild
        Include="@(ProjectsToBuild)"
        Condition="'%(ProjectsToBuild.HasPublicApi)' != ''"/>
    </ItemGroup>
    <MakeDir Directories="docs"/>
    <MSBuild
      Projects="Tools\ApiDump\ApiDump.csproj;@(PublicApiProjectsToBuild)"
      Properties="Configuration=$(ApiConfiguration)"
      Targets="Restore;Build"/>
    <ItemGroup>
      <PublicApiAssembly Include="%(PublicApiProjectsToBuild.RelativeDir)bin\$(ApiConfiguration)\*\%(Filename).dll">
        <ApiFile>docs\%(Filename).api.cs</ApiFile>
      </PublicApiAssembly>
    </ItemGroup>
    <Exec Command="Tools\ApiDump\ApiDump.exe %(PublicApiAssembly.FullPath) -o %(PublicApiAssembly.ApiFile)"/>
  </Target>

  <Target
    Name="TestDesktop"
    Condition="!$(IsDotNetCoreMSBuild) And $(SkipDesktopTests) == ''"
    AfterTargets="Test">
    <PropertyGroup>
      <TestDriver Condition="$(IsMac)">Clients\Xamarin.Interactive.Client.Mac\bin\$(Configuration)\Xamarin Workbooks.app\Contents\MacOS\Xamarin Workbooks</TestDriver>
      <TestDriver Condition="$(IsWindows)">Clients\Xamarin.Interactive.Client.Windows\bin\$(Configuration)\Workbooks\Xamarin Workbooks.exe</TestDriver>
      <TestAssembly>Tests\Xamarin.Interactive.Tests\bin\$(Configuration)\net461\Xamarin.Interactive.Tests.dll</TestAssembly>
      <TestCommand Condition="'$(TestToRun)' != ''">-test:$(TestToRun)</TestCommand>
    </PropertyGroup>
    <Error
      Condition="!Exists($(TestDriver))"
      Text="Desktop test driver does not exist: $(TestDriver)"/>
    <Error
      Condition="!Exists($(TestAssembly))"
      Text="Desktop test assembly does not exist: $(TestAssembly)"/>
    <Exec Command="&quot;$(TestDriver)&quot; cli test $(TestAssembly) &quot;-result:$(TopDirectory)Tests/Regressions.$(Configuration).xml&quot; $(TestCommand)"/>
  </Target>

  <Target
    Name="TestInspectorInjector"
    Condition="$(IsMac)">
    <Exec Command="Tests/Xamarin.Interactive.Tests.InspectorSupport.Mac/bin/$(Configuration)/Xamarin.Interactive.Tests.InspectorSupport.Mac.app/Contents/MacOS/Xamarin.Interactive.Tests.InspectorSupport.Mac"/>
  </Target>

  <Target
    Name="ArchiveSymbolFiles"
    BeforeTargets="Package">
    <PropertyGroup>
      <SymbolFilesArchive>$(ArtifactsBasePath)XamarinInteractive-$(ReleaseVersion_SemVer).$(RuntimeIdentifierPlatformBase).symbols.zip</SymbolFilesArchive>
    </PropertyGroup>
    <ItemGroup>
      <SymbolFilesToArchive Include="Agents\**\bin\$(Configuration)\**\*.pdb" />
      <SymbolFilesToArchive Include="Clients\**\bin\$(Configuration)\**\*.pdb" />
      <SymbolFilesToArchive Include="WorkbookApps\**\bin\$(Configuration)\*.pdb" />
    </ItemGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(SymbolFilesArchive)))"/>

    <Message Text="Archiving symbol files to &quot;$(SymbolFilesArchive)&quot;."/>
    <ZipArchive
      SourceFiles="@(SymbolFilesToArchive)"
      DestinationArchiveFileName="$(SymbolFilesArchive)"/>
  </Target>

  <Target
    Name="GenerateReleaseNotes"
    AfterTargets="Package"
    Inputs="$(TopDirectory)UPDATES.md"
    Outputs="$(ArtifactsBasePath)updater-release-notes-$(ReleaseVersion_SemVer).html">
    <CommonMarkToHtml
      CommonMarkFile="$(TopDirectory)UPDATES.md"
      HtmlTemplateFile="$(TopDirectory)Package\release-notes-template.html"
      HtmlOutputFile="$(ArtifactsBasePath)updater-release-notes-$(ReleaseVersion_SemVer).html" />
  </Target>

  <Target
    Name="UpdatePublicApiDocs"
    DependsOnTargets="UpdatePublicApiDefinitions">
    <Exec Command="mdoc update --delete Agents\Xamarin.Interactive\bin\Release\netstandard2.0\Xamarin.Interactive.dll -out Agents\Xamarin.Interactive\API\en -r /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.5/Facades/netstandard.dll"/>
  </Target>

  <Target
    Name="AssemblePublicApiDocs">
    <Exec Command="mdoc assemble -o Agents\Xamarin.Interactive\API\interactive-api Agents\Xamarin.Interactive\API\en"/>
  </Target>
</Project>